psus_target_croplands$PSU_T_LULC_ID <- paste0(psus_target_croplands$ID, "-", psus_target_croplands$lulc)
psus_target_croplands <- psus_target_croplands %>%
select(ID, Replace_ID, lulc, PSU_R_LULC_ID, PSU_T_LULC_ID, PSU_R_ID, all_of(paste0(ISO.code, "_PSU_ID")), everything())
head(psus_target_croplands, 5)
tsus_target_croplands$PSU_T_LULC_ID <- paste0(tsus_target_croplands$PSU_ID, "-", tsus_target_croplands$lulc)
head(tsus_target_croplands, 5)
psus_target_croplands[["PSU_R_ID"]] <- psus_repl_croplands[[paste0(ISO.code,"_PSU_ID")]][index]
psus_target_croplands <- psus_target_croplands %>%
select(ID, Replace_ID, lulc, PSU_R_LULC_ID, PSU_R_ID, all_of(paste0(ISO.code, "_PSU_ID")), everything())
head(psus_target_croplands, 5)
psus_target_croplands$PSU_T_LULC_ID <- paste0(psus_target_croplands$ID, "-", psus_target_croplands$lulc)
psus_target_croplands <- psus_target_croplands %>%
select(ID, Replace_ID, lulc, PSU_R_LULC_ID, PSU_T_LULC_ID, PSU_R_ID, all_of(paste0(ISO.code, "_PSU_ID")), everything())
head(psus_target_croplands, 5)
tsus_target_croplands$PSU_T_LULC_ID <- paste0(tsus_target_croplands$PSU_ID, "-", tsus_target_croplands$lulc)
head(tsus_target_croplands, 5)
index <- match(tsus_target$PSU_T_LULC_ID, psus_target$PSU_T_LULC_ID)
index <- match(tsus_target_croplands$PSU_T_LULC_ID, psus_target_croplands$PSU_T_LULC_ID)
index
index <- match(tsus_target_croplands$PSU_T_LULC_ID, psus_target_croplands$PSU_T_LULC_ID)
tsus_target_croplands[[paste0(ISO.code,"_PSU_ID")]] <- psus_target_croplands[[paste0(ISO.code,"_PSU_ID")]][index]
tsus_target_croplands
tsus_target_croplands[["PSU_R_ID"]] <- psus_target_croplands[["PSU_R_ID"]][index]
tsus_target_croplands
tsus_target_croplands <- tsus_target_croplands %>%
select(all_of(paste0(ISO.code, "_PSU_ID")), PSU_Type, order, SSU_Type, TSU_ID, TSU_Type, site_id, lulc, PSU_R_ID)
tsus_target_croplands
tsus_target_croplands[[paste0(ISO.code,"_PSU_ID")]] <- psus_target_croplands[[paste0(ISO.code,"_PSU_ID")]][index]
tsus_target_croplands[["PSU_R_ID"]] <- psus_target_croplands[["PSU_R_ID"]][index]
tsus_target_croplands
tsus_target_croplands <- sf::st_read(paste0(folder, "crops/TSUs_target.shp"), quiet = T)
tsus_target_croplands$lulc <- "C"
tsus_target_croplands
tsus_target_croplands$PSU_T_LULC_ID <- paste0(tsus_target_croplands$PSU_ID, "-", tsus_target_croplands$lulc)
head(tsus_target_croplands, 5)
index <- match(tsus_target_croplands$PSU_T_LULC_ID, psus_target_croplands$PSU_T_LULC_ID)
tsus_target_croplands[[paste0(ISO.code,"_PSU_ID")]] <- psus_target_croplands[[paste0(ISO.code,"_PSU_ID")]][index]
tsus_target_croplands[["PSU_R_ID"]] <- psus_target_croplands[["PSU_R_ID"]][index]
tsus_target_croplands
paste0(ISO.code, "_PSU_ID")
tsus_target_croplands <- tsus_target_croplands %>%
select(all_of(paste0(ISO.code, "_PSU_ID")), PSU_Type, order, SSU_Type, TSU_ID, TSU_Type, site_id, lulc, PSU_R_ID)
head(tsus_target_croplands, 5)
names(tsus_target_croplands) <- gsub(paste0(ISO.code, "_PSU_ID"), "PSU_ID", names(tsus_target_croplands))
names(tsus_target_croplands) <- gsub("order", "SSU_ID", names(tsus_target_croplands))
head(tsus_target_croplands, 5)
tsus_target_croplands$site_id = paste0(ISO.code, sprintf("%04d", tsus_target_croplands$PSU_ID), "-", tsus_target_croplands$SSU_ID, "-", tsus_target_croplands$TSU_ID, tsus_target_croplands$lulc)
head(tsus_target_croplands, 5)
psus_repl_croplands$PSU_T_LULC_ID <- paste0(psus_repl_croplands$ID, "-", psus_repl_croplands$lulc)
psus_repl_croplands <- psus_repl_croplands %>%
select(ID, Replace_ID, lulc, PSU_R_LULC_ID, PSU_T_LULC_ID, all_of(paste0(ISO.code, "_PSU_ID")), everything())
tsus_repl_croplands$PSU_T_LULC_ID <- paste0(tsus_repl_croplands$PSU_ID, "-", tsus_repl_croplands$lulc)
index <- match(tsus_repl_croplands$PSU_T_LULC_ID, psus_repl_croplands$PSU_T_LULC_ID)
tsus_repl_croplands[[paste0(ISO.code,"_PSU_ID")]] <- psus_repl_croplands[[paste0(ISO.code,"_PSU_ID")]][index]
tsus_repl_croplands
psus_target_croplands
View(tsus_repl_croplands)
tsus_repl_croplands[["PSU_T_ID"]] <- psus_target_croplands[[paste0(ISO.code, "_PSU_ID")]][match(tsus_repl_croplands[[paste0(ISO.code,"_PSU_ID")]], psus_target_croplands$PSU_R_ID)]
tsus_repl_croplands
View(tsus_repl_croplands)
View(psus_target_croplands)
tsus_repl_croplands <- tsus_repl_croplands %>%
select(all_of(paste0(ISO.code, "_PSU_ID")), PSU_Type, order, SSU_Type, TSU_ID, TSU_Type, site_id, lulc, PSU_T_ID)
names(tsus_repl_croplands) <- gsub(paste0(ISO.code, "_PSU_ID"), "PSU_ID", names(tsus_repl_croplands))
names(tsus_repl_croplands) <- gsub("order", "SSU_ID", names(tsus_repl_croplands))
tsus_repl_croplands$site_id = paste0(ISO.code, sprintf("%04d", tsus_repl_croplands$PSU_ID), "-", tsus_repl_croplands$SSU_ID, "-", tsus_repl_croplands$TSU_ID, tsus_repl_croplands$lulc)
head(tsus_repl_croplands, 5)
country_boundaries <- sf::st_read(paste0(folder,"../shapes/ZMB_adm1.shp"), quiet=TRUE)
folder
paste0(folder,"./shapes/ZMB_adm1.shp")
paste0(folder,"../shapes/ZMB_adm1.shp")
country_boundaries <- sf::st_read(paste0(folder,"../shapes/ZMB_adm1.shp"), quiet=TRUE)
country_boundaries <- sf::st_read(paste0(folder,"../shapes/ZMB_adm1.shp"), quiet=TRUE)
country_boundaries <- sf::st_read(paste0(folder,"../shapes/ZMB_adm1.shp"), quiet=TRUE)
country_boundaries
# Define the column with the country and province names
country_boundaries$country <- ISO.code
country_boundaries$province <- country_boundaries$NAME_1
country_boundaries
if(crs(country_boundaries)!=epsg){
country_boundaries <- country_boundaries %>%
st_as_sf() %>% sf::st_transform(crs=epsg)
}
if(sf::st_crs(country_boundaries)$epsg !=epsg){
country_boundaries <- country_boundaries %>%
st_as_sf() %>% sf::st_transform(crs=epsg)
}
ncolors <- length(unique(country_boundaries$province))
ggplot() +
geom_sf(data = country_boundaries, color = "#101010", fill = province, lwd = 0.8) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal()
country_boundaries
ggplot() +
geom_sf(data = country_boundaries, fill = province, lwd = 0.8) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal()
ggplot() +
geom_sf(data = country_boundaries, lwd = 0.8) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal()
country_boundaries
ggplot() +
geom_sf(data = country_boundaries, aes(fill = province), lwd = 0.8) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black") +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal()
ggplot() +
geom_sf(data = country_boundaries, aes(fill = province), lwd = 0.8) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black") +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal()+
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), lwd = 0.8) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("brown", "orange"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), lwd = 0.8) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("lightbrown", "lightorange"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), lwd = 0.8) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("brown", "grey"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), lwd = 0.2) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("brown", "grey"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), lwd = 0) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("brown", "grey"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), color = NA) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("brown", "grey"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), color = NA) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("#D81B60", "#54ABE9", "#ABE30D"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), color = NA) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("#B7F676", "#54ABE9", "#ABE30D"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), color = NA) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("#707276", "#54ABE9", "#ABE30D"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), color = NA) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("#707276", "#A99F33", "#ABE30D"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), color = NA) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("#707276", "#A99F33", "#000000"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), color = NA) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("#707276", "#A99F33", "#FDAE66"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), color = NA) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("#54ABE9", "#A99F33", "#FDAE66"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), color = NA) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("#54ABE9", "#A99F33"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), color = NA) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("#8094A9", "#A99F33"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot() +
geom_sf(data = country_boundaries, aes(fill = as.factor(province)), color = NA) +
geom_sf_text(data = country_boundaries, aes(label = province), size = 3, color = "black", fontface = "bold") +
scale_fill_manual(values = colorRampPalette(c("#F2DC96", "#A99F33"))(length(unique(country_boundaries$province)))) +
labs(title = "Country Boundaries - Provinces/States",
x = "Longitude",
y = "Latitude",
fill = "Provinces") +
theme_minimal() +
theme(legend.position = "bottom")
tsus_uniq_sites <- dplyr::filter(tsus_target_croplands, SSU_Type == "Target" & TSU_Type == "Target")
head(tsus_uniq_sites)
tsus_uniq_sites <- sf::st_join(tsus_uniq_sites, country_boundaries)
tsus_uniq_sites <- tsus_uniq_sites %>%
select(c(site_id, country, province, lulc, geometry))
# Converting shapefile to DF
tsus_uniq_sites_df <- as.data.frame(tsus_uniq_sites)
sites_distribution <- tsus_uniq_sites_df %>%
group_by(country, lulc) %>%
summarise(Sites = n())
sites_distribution
custom_colors <- colorRampPalette(brewer.pal(11, "BrBG"))(ncolors)
#jpeg(paste0(folder,"/final_site_distribution.jpeg"), width = 16, height = 12, units = 'in', res = 300)
ggplot(sites_distribution, aes(x = lulc, y = Sites, fill = lulc)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Sites),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
labs(
title = "Site Distribution",
x = "LULC",
y = "Number of Sites",
fill = "LULC"
) +
scale_x_discrete(labels = c("C" = "Cropland", "F" = "Forest", "G" = "Grassland")) +  # Rename x-axis labels
scale_fill_manual(values = custom_colors, labels = c("C" = "Cropland", "F" = "Forest", "G" = "Grassland")) +  # Custom color palette
ylim(0, max(sites_distribution$Sites) * 1.2) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
legend.position = "top",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 12),
panel.grid.major = element_line(color = "grey80", linetype = "dotted"),
panel.grid.minor = element_blank()
)
#dev.off()
tsus_uniq_sites_df <- as.data.frame(tsus_uniq_sites)
sites_distribution <- tsus_uniq_sites_df %>%
group_by(province, lulc) %>%
summarise(Sites = n())
# Graphs
custom_colors <- colorRampPalette(brewer.pal(11, "Spectral"))(ncolors)
jpeg(paste0(folder,"/final_site_distribution_province.jpeg"), width = 16, height = 12, units = 'in', res = 300)
ggplot(sites_distribution, aes(x = lulc, y = Sites, fill = province)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Sites),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
labs(
title = "Site Distribution",
x = "LULC",
y = "Number of Sites",
fill = "Province"
) +
scale_x_discrete(labels = c("C" = "Cropland", "F" = "Forest", "G" = "Grassland")) +  # Rename x-axis labels
scale_fill_manual(values = custom_colors) +  # Custom color palette
ylim(0, max(sites_distribution$Sites) * 1.2) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
legend.position = "top",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 12),
panel.grid.major = element_line(color = "grey80", linetype = "dotted"),
panel.grid.minor = element_blank()
)
dev.off()
tsus_uniq_sites_df <- as.data.frame(tsus_uniq_sites)
sites_distribution <- tsus_uniq_sites_df %>%
group_by(province, lulc) %>%
summarise(Sites = n())
# Graphs
custom_colors <- colorRampPalette(brewer.pal(11, "Spectral"))(ncolors)
#jpeg(paste0(folder,"/final_site_distribution_province.jpeg"), width = 16, height = 12, units = 'in', res = 300)
ggplot(sites_distribution, aes(x = lulc, y = Sites, fill = province)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = Sites),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
labs(
title = "Site Distribution per province/state",
x = "LULC",
y = "Number of Sites",
fill = "Province"
) +
scale_x_discrete(labels = c("C" = "Cropland", "F" = "Forest", "G" = "Grassland")) +  # Rename x-axis labels
scale_fill_manual(values = custom_colors) +  # Custom color palette
ylim(0, max(sites_distribution$Sites) * 1.2) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 0, hjust = 0.5, size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
legend.position = "top",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 12),
panel.grid.major = element_line(color = "grey80", linetype = "dotted"),
panel.grid.minor = element_blank()
)
#dev.off()
#Initial setup -----------------------------------------------------------------
rm(list=ls())
gc()
# Working directory
#wd <- 'C:/Users/luottoi/Documents/GSOCseq'
wd <- 'D:/FAO/github/SoilFER/sampling design/data/rasters'
setwd(wd)
# Load Packages
library(terra)
tmp<-rast("AverageTemperature_2001-2022.tif")
tmp<-rast("Average_Temp_2001_uptodate.tif")
pre_01_18<-rast("Prec_2001_uptodate.tif")
tmp_Jan_1<-tmp[[1]]
dim(tmp_Jan_1)
# Create empty list
Rlist<-list()
# Average of 20 years (j)  and 12 months (i)
##########for loop starts###############
for (i in 1:12) {
var_sum<-tmp_Jan_1*0
k<-i
for (j in 1:(dim(tmp)[3]/12)) {
print(k)
var_sum<-(var_sum + tmp[[k]])
k<-k+12
}
#Save each month average.
var_avg<-var_sum/(dim(tmp)[3]/12)
#writeRaster(ra,filename=name, format="GTiff")
Rlist[[i]]<-var_avg
}
Temp_Stack<-rast(Rlist)
Temp_Stack<-Temp_Stack*0.1 # rescale to ?C
Temp_Stack
writeRaster(Temp_Stack,filename='Temp_Stack_01-22_TC.tif',overwrite=TRUE)
pre_Jan_1<-pre_01_18[[1]]
dim(pre_Jan_1)
# Create empty list
Rlist<-list()
#########for loop starts############
for (i in 1:12) {
var_sum<-pre_Jan_1*0
k<-i
for (j in 1:(dim(pre_01_18)[3]/12)) {
print(k)
var_sum<-(var_sum + pre_01_18[[k]])
k<-k+12
}
#Save each month average.
var_avg<-var_sum/(dim(pre_01_18)[3]/12)
#writeRaster(ra,filename=name, format=overwrite=TRUE)
Rlist[[i]]<-var_avg
}
Prec_Stack<-rast(Rlist)
writeRaster(Prec_Stack,filename='Prec_Stack_01-22_TC.tif',overwrite=TRUE)
Prec_Stack
Temp_Stack
colnames(Temp_Stack)
names(Temp_Stack)
names(Prec_Stack)
#### Creating an unique file
# Define the desired column names
prec_colnames <- c("pJan", "pFeb", "pMar", "pApr", "pMay", "pJun",
"pJul", "pAug", "pSep", "pOct", "pNov", "pDec")
temp_colnames <- c("tJan", "tFeb", "tMar", "tApr", "tMay", "tJun",
"tJul", "tAug", "tSep", "tOct", "tNov", "tDec")
names(Prec_Stack)
# Rename the layers for precipitation stack
names(Prec_Stack) <- prec_colnames
names(Prec_Stack)
names(Temp_Stack)
# Rename the layers for temperature stack
names(Temp_Stack) <- temp_colnames
# Combine the two stacks into one
combined_stack <- c(Prec_Stack, Temp_Stack)
combined_stack
names(combined_stack)
print(combined_stack)
# Exporting the final output
writeRaster(Prec_Stack,filename='climate_vars.tif',overwrite=TRUE)
# Exporting the final output
writeRaster(combined_stack, filename='climate_vars.tif', overwrite=TRUE)
test <- rast("newhall_zam_clipped.tif")
summary(test)
#Initial setup -----------------------------------------------------------------
rm(list=ls())
gc()
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../") # Move wd down to the main folder
getwd()
# List of packages
packages <- c("terra")
# Load packages
invisible(lapply(packages, library, character.only = TRUE))
rm(packages)
# Path to rasters
raster.path <- "data/rasters/"
tmp <- rast(paste0(raster.path, "Average_Temp_2001_uptodate.tif"))
prec_mm <- rast(paste0(raster.path, "Prec_2001_uptodate.tif"))
# Get one month temperature (January)
tmp_Jan_1 <- tmp[[1]]
dim(tmp_Jan_1)
# Create empty list
Rlist<-list()
# Have one month Precipitation ( January)
pre_Jan_1<-prec_mm[[1]]
dim(pre_Jan_1)
# Create empty list
Rlist<-list()
# Have one month Precipitation ( January)
pre_Jan_1<-prec_mm[[1]]
dim(pre_Jan_1)
