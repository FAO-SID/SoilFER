) +
tm_layout(
main.title = "Target Primary Sampling Units",
main.title.size = 1.5,
legend.outside = TRUE,  # Allocate legend outside
legend.outside.position = "right",  # Place the legend on the right side
frame = TRUE,  # Include a map frame for better geographic reference
legend.title.size = 1,
legend.text.size = 0.8
) +
tm_graticules(ticks = TRUE, lines = TRUE, labels.size = 0.8, alpha = 0.3)
#jpeg(paste0(results.path,"/sampling_units.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot() +
geom_raster(data = as.data.frame(PSU.r$PC1, xy = TRUE), aes(x = x, y = y, fill = PC1)) +
scale_fill_viridis_c() +
#scale_fill_gradientn(colours = colorspace::diverge_hcl(7)) +
geom_sf(data = legacy[1], aes(), color = "#A6AAA5", size = 0.2, shape = 19) +
geom_sf(data = target.PSUs, color = "#101010", fill = NA, lwd = 0.8) +
geom_sf(data = new[1], aes(), color = "#D81B60", size = 0.5, shape = 19, lwd = 0.7) +
labs(title = "Target Primary Sampling Units",
x = "Longitude",
y = "Latitude",
fill = "PC1") +
theme_minimal()
jpeg(paste0(results.path,"/sampling_units.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot() +
geom_raster(data = as.data.frame(PSU.r$PC1, xy = TRUE), aes(x = x, y = y, fill = PC1)) +
scale_fill_viridis_c() +
#scale_fill_gradientn(colours = colorspace::diverge_hcl(7)) +
geom_sf(data = legacy[1], aes(), color = "#A6AAA5", size = 0.2, shape = 19) +
geom_sf(data = target.PSUs, color = "#101010", fill = NA, lwd = 0.8) +
geom_sf(data = new[1], aes(), color = "#D81B60", size = 0.5, shape = 19, lwd = 0.7) +
labs(title = "Target Primary Sampling Units",
x = "Longitude",
y = "Latitude",
fill = "PC1") +
theme_minimal()
dev.off()
jpeg(paste0(results.path,"/sampling_units.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot() +
geom_raster(data = as.data.frame(PSU.r$PC1, xy = TRUE), aes(x = x, y = y, fill = PC1)) +
scale_fill_viridis_c() +
#scale_fill_gradientn(colours = colorspace::diverge_hcl(7)) +
geom_sf(data = legacy[1], aes(), color = "#A6AAA5", size = 0.2, shape = 19) +
geom_sf(data = target.PSUs, color = "#101010", fill = NA, lwd = 0.5) +
geom_sf(data = new[1], aes(), color = "#D81B60", size = 0.5, shape = 19, lwd = 0.7) +
labs(title = "Target Primary Sampling Units",
x = "Longitude",
y = "Latitude",
fill = "PC1") +
theme_minimal()
dev.off()
jpeg(paste0(results.path,"/sampling_units.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot() +
geom_raster(data = as.data.frame(PSU.r$PC1, xy = TRUE), aes(x = x, y = y, fill = PC1)) +
scale_fill_viridis_c() +
#scale_fill_gradientn(colours = colorspace::diverge_hcl(7)) +
geom_sf(data = legacy[1], aes(), color = "#A6AAA5", size = 0.2, shape = 19) +
geom_sf(data = target.PSUs, color = "#101010", fill = NA, lwd = 0.3) +
geom_sf(data = new[1], aes(), color = "#D81B60", size = 0.2, shape = 19, lwd = 0.7) +
labs(title = "Target Primary Sampling Units",
x = "Longitude",
y = "Latitude",
fill = "PC1") +
theme_minimal()
dev.off()
#  PSUs environmental representation over PC1 and PC2 of covariates
ggplot(PSU.df) +
geom_point(mapping = aes(x = PC1, y = PC2, colour = as.character(cluster)), alpha = 0.5) +
scale_colour_viridis_d() +
geom_point(data = myCSCsample, mapping = aes(x = PC1, y = PC2), size = .5, colour = "red") +
scale_x_continuous(name = "PC1") +
scale_y_continuous(name = "PC2") +
theme(legend.position = "none") +
ggtitle("Distribution of sampling PSUs over the space of environmental covariates")
jpeg(paste0(results.path,"/pc_analysis.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot(PSU.df) +
geom_point(mapping = aes(x = PC1, y = PC2, colour = as.character(cluster)), alpha = 0.5) +
scale_colour_viridis_d() +
geom_point(data = myCSCsample, mapping = aes(x = PC1, y = PC2), size = .5, colour = "red") +
scale_x_continuous(name = "PC1") +
scale_y_continuous(name = "PC2") +
theme(legend.position = "none") +
ggtitle("Distribution of sampling PSUs over the space of environmental covariates")
dev.off()
all_psus_tsus <- list()
# Initialize a list to store target SSUS
selected_ssus <- list()
for (psu_id in 1:nrow(target.PSUs)) {
selected_psu <- target.PSUs[psu_id, ]
# Generate SSUs within the selected PSU
ssu_grid <- st_make_grid(selected_psu, cellsize = c(ssu_size, ssu_size), square = TRUE)
ssu_grid_sf <- st_sf(geometry = ssu_grid)
# Convert ssu_grid_sf to SpatVector
ssu_grid_vect <- vect(ssu_grid_sf)
# Extract values of lu for cells that intersect with ssu_grid_vect
extracted_values <- extract(crops, ssu_grid_vect, fun=table)
# Add lu code to the SSUs
ssu_grid_sf$lu <- (extracted_values[,2]*100)/25
ssu_grid_sf <- ssu_grid_sf[ssu_grid_sf$lu > percent_crop, ]
#summary(ssu_grid_sf)
# Subset ssu_grid_sf to get only the grid squares within lu
#ssu_grid_sf <- ssu_grid_sf[!is.na(ssu_grid_sf$lu), ]
#ssu_grid_sf <- ssu_grid_sf[ssu_grid_sf$lu>0, ]
#plot(ssu_grid_sf)
print(paste(psu_id, " out of ", nrow(target.PSUs)))
# Count SSUs
total_ssus <- nrow(ssu_grid_sf)
if(total_ssus >= (num_primary_ssus + num_alternative_ssus)) {
primary_ssus_indices <- sample(1:total_ssus, num_primary_ssus, replace = FALSE)
available_for_alternatives <- setdiff(1:total_ssus, primary_ssus_indices)
alternative_ssus_indices <- sample(available_for_alternatives, num_alternative_ssus, replace = FALSE)
selected_ssus[[psu_id]] <- rbind(ssu_grid_sf[primary_ssus_indices, ], ssu_grid_sf[alternative_ssus_indices, ])
primary_tsus <- lapply(primary_ssus_indices, function(index) {
generate_tsu_points_within_ssu(ssu_grid_sf[index, ], number_TSUs, index, "Target",crops)
})
# Generate TSUs for alternative SSUs with naming
alternative_tsus <- lapply(alternative_ssus_indices, function(index) {
generate_tsu_points_within_ssu(ssu_grid_sf[index, ], number_TSUs, index, "Alternative",crops)
})
# Combine all TSUs of the current PSU into one sf object
all_psus_tsus[[psu_id]] <- do.call(rbind, c(primary_tsus, alternative_tsus))
} else {
warning(paste("PSU", psu_id, "does not have enough SSUs for selection. Skipping."))
}
}
# Combine TSUs from all PSUs into one sf object
all_tsus <- do.call(rbind, all_psus_tsus)
all_tsus$TSU_Type <- "Target"
all_tsus[all_tsus$TSU_ID >1,"TSU_Type"] <- "Alternative"
all_tsus$PSU_Type <- "Target"
all_tsus <- all_tsus %>%
dplyr::select("TSU_Name","PSU_ID","SSU_ID","TSU_ID","PSU_Type","SSU_Type","TSU_Type","geometry")
jpeg(paste0(results.path,"/Sampling_Units_PCA_250m_pixel.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot() +
geom_raster(data = as.data.frame(lu_bbox, xy = T), aes(x = x, y = y, fill = lu)) +
#scale_fill_gradientn(colours = colorspace::diverge_hcl(7)) +
guides(fill = "none")  +
geom_sf(data = selected_psu[1], fill = NA, aes(color = labels[1]), lwd = 0.6, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[primary_ssus_indices, ], fill = NA, aes(color = labels[2]), lwd = 0.6, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[alternative_ssus_indices, ], fill = NA, aes(color = labels[3]), lwd = 0.6, show.legend = TRUE) +
geom_sf(data = all_tsus, aes(geometry = geometry, color = labels[4]), size = 0.5, shape = 19, show.legend = TRUE) +
coord_sf(xlim = c(bbox_psu["xmin"], bbox_psu["xmax"]), ylim = c(bbox_psu["ymin"], bbox_psu["ymax"])) +
labs(title = "Target PSU, SSUs, and TSUs",
x = "Longitude",
y = "Latitude",
color = "Legend") +
scale_color_manual(values = c("Target PSU" = "blue",
"Selected SSUs" = "blue",
"Alternative SSUs" = "red",
"TSUs" = "black")) +
theme_minimal() +
theme(legend.position = "right",
legend.justification = "center",
legend.box.margin = margin(0, 0, 0, 20))
bbox_psu <- st_bbox(selected_psu[1])
lu_bbox = terra::crop(crops, selected_psu[1], mask = T, overwrite = T)
plot(lu_bbox)
PSU_bbox = terra::crop(cov.dat$PC1, selected_psu[1], mask = T, overwrite = T)
plot(PSU_bbox)
PSU_bbox = terra::resample(PSU_bbox, lu_bbox, method = "cubicspline")
labels <- c("Target PSU", "Selected SSUs", "Alternative SSUs", "TSUs")
jpeg(paste0(results.path,"/Sampling_Units_PCA_250m_pixel.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot() +
geom_raster(data = as.data.frame(lu_bbox, xy = T), aes(x = x, y = y, fill = lu)) +
#scale_fill_gradientn(colours = colorspace::diverge_hcl(7)) +
guides(fill = "none")  +
geom_sf(data = selected_psu[1], fill = NA, aes(color = labels[1]), lwd = 0.6, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[primary_ssus_indices, ], fill = NA, aes(color = labels[2]), lwd = 0.6, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[alternative_ssus_indices, ], fill = NA, aes(color = labels[3]), lwd = 0.6, show.legend = TRUE) +
geom_sf(data = all_tsus, aes(geometry = geometry, color = labels[4]), size = 0.5, shape = 19, show.legend = TRUE) +
coord_sf(xlim = c(bbox_psu["xmin"], bbox_psu["xmax"]), ylim = c(bbox_psu["ymin"], bbox_psu["ymax"])) +
labs(title = "Target PSU, SSUs, and TSUs",
x = "Longitude",
y = "Latitude",
color = "Legend") +
scale_color_manual(values = c("Target PSU" = "blue",
"Selected SSUs" = "blue",
"Alternative SSUs" = "red",
"TSUs" = "black")) +
theme_minimal() +
theme(legend.position = "right",
legend.justification = "center",
legend.box.margin = margin(0, 0, 0, 20))
dev.off()
jpeg(paste0(results.path,"/Sampling_Units_PCA_250m_pixel.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot() +
geom_raster(data = as.data.frame(lu_bbox, xy = T), aes(x = x, y = y, fill = lu)) +
#scale_fill_gradientn(colours = colorspace::diverge_hcl(7)) +
guides(fill = "none")  +
geom_sf(data = selected_psu[1], fill = NA, aes(color = labels[1]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[primary_ssus_indices, ], fill = NA, aes(color = labels[2]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[alternative_ssus_indices, ], fill = NA, aes(color = labels[3]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = all_tsus, aes(geometry = geometry, color = labels[4]), size = 0.4, shape = 19, show.legend = TRUE) +
coord_sf(xlim = c(bbox_psu["xmin"], bbox_psu["xmax"]), ylim = c(bbox_psu["ymin"], bbox_psu["ymax"])) +
labs(title = "Target PSU, SSUs, and TSUs",
x = "Longitude",
y = "Latitude",
color = "Legend") +
scale_color_manual(values = c("Target PSU" = "blue",
"Selected SSUs" = "blue",
"Alternative SSUs" = "red",
"TSUs" = "black")) +
theme_minimal() +
theme(legend.position = "right",
legend.justification = "center",
legend.box.margin = margin(0, 0, 0, 20))
dev.off()
dev.off()
jpeg(paste0(results.path,"/Sampling_Units_PCA_250m_pixel.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot() +
geom_raster(data = as.data.frame(lu_bbox, xy = T), aes(x = x, y = y, fill = lu)) +
#scale_fill_gradientn(colours = colorspace::diverge_hcl(7)) +
guides(fill = "none")  +
geom_sf(data = selected_psu[1], fill = NA, aes(color = labels[1]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[primary_ssus_indices, ], fill = NA, aes(color = labels[2]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[alternative_ssus_indices, ], fill = NA, aes(color = labels[3]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = all_tsus, aes(geometry = geometry, color = labels[4]), size = 0.4, shape = 19, show.legend = TRUE) +
coord_sf(xlim = c(bbox_psu["xmin"], bbox_psu["xmax"]), ylim = c(bbox_psu["ymin"], bbox_psu["ymax"])) +
labs(title = "Target PSU, SSUs, and TSUs",
x = "Longitude",
y = "Latitude",
color = "Legend") +
scale_color_manual(values = c("Target PSU" = "blue",
"Selected SSUs" = "blue",
"Alternative SSUs" = "red",
"TSUs" = "black")) +
theme_minimal() +
theme(legend.position = "right",
legend.justification = "center",
legend.box.margin = margin(0, 0, 0, 20))
dev.off()
# Plot first PSU with target and alternative SSUs
plot(selected_psu[1], col=NA, reset=FALSE, main="PSU")
plot(ssu_grid_sf[primary_ssus_indices, ], col="blue", add=TRUE)
plot(ssu_grid_sf[alternative_ssus_indices, ], col="red", add=TRUE)
plot(all_tsus[1], col="green", pch=19, cex=0.5, add=TRUE)
legend("bottomleft",
c("Target SSU", "Alternative SSU", "TSUs"), fill=c("blue", "red",  0), border=c("black","black",NA), horiz=F, cex=0.8, pch = c(NA,NA,3), col=c(NA,NA,"green"))
dev.off()
# Plot first PSU with target and alternative SSUs
plot(selected_psu[1], col=NA, reset=FALSE, main="PSU")
plot(ssu_grid_sf[primary_ssus_indices, ], col="blue", add=TRUE)
plot(ssu_grid_sf[alternative_ssus_indices, ], col="red", add=TRUE)
plot(all_tsus[1], col="green", pch=19, cex=0.5, add=TRUE)
legend("bottomleft",
c("Target SSU", "Alternative SSU", "TSUs"), fill=c("blue", "red",  0), border=c("black","black",NA), horiz=F, cex=0.8, pch = c(NA,NA,3), col=c(NA,NA,"green"))
jpeg(paste0(results.path,"/Sampling_Units_PCA_250m_pixel.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot() +
geom_raster(data = as.data.frame(lu_bbox, xy = T), aes(x = x, y = y, fill = lu)) +
#scale_fill_gradientn(colours = colorspace::diverge_hcl(7)) +
guides(fill = "none")  +
geom_sf(data = selected_psu[1], fill = NA, aes(color = labels[1]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[primary_ssus_indices, ], fill = NA, aes(color = labels[2]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[alternative_ssus_indices, ], fill = NA, aes(color = labels[3]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = all_tsus, aes(geometry = geometry, color = labels[4]), size = 0.4, shape = 19, show.legend = TRUE) +
coord_sf(xlim = c(bbox_psu["xmin"], bbox_psu["xmax"]), ylim = c(bbox_psu["ymin"], bbox_psu["ymax"])) +
labs(title = "Target PSU, SSUs, and TSUs",
x = "Longitude",
y = "Latitude",
color = "Legend") +
scale_color_manual(values = c("Target PSU" = "blue",
"Selected SSUs" = "blue",
"Alternative SSUs" = "red",
"TSUs" = "black")) +
theme_minimal() +
theme(legend.position = "right",
legend.justification = "center",
legend.box.margin = margin(0, 0, 0, 20))
dev.off()
dfr <- PSU.df[,c("x","y","cluster")]
dfr$cluster <- as.numeric(dfr$cluster)
dfr <- rasterFromXYZ(dfr)
crs(dfr) = epsg # Define the CRS
# Extract cluster ID for the target PSUS
PSU_cluster.id <- unlist(extract(dfr, target.PSUs))
valid.PSU_clusters <-
target.PSUs %>% mutate(
cluster = extract(dfr, target.PSUs, fun = mean, na.rm = TRUE)
)
all.PSU_clusters <-
psu_grid %>% mutate(
cluster = extract(dfr, psu_grid, fun = mean, na.rm = TRUE)
)
all.PSU_clusters <- na.omit(all.PSU_clusters)
# Add cluster information to the TSUS
valid.PSU_clusters <- valid.PSU_clusters %>%
rename(Replace_ID= cluster)
all_tsus <- st_join(all_tsus, valid.PSU_clusters)
# Add order of sampling for TSUs (target: 1-4, alternative: 5-7)
all_tsus <- all_tsus %>%
group_by(PSU_ID) %>%
mutate(order = match(SSU_ID, unique(SSU_ID))) %>%
ungroup()
# Create final site ID
all_tsus$site_id = paste0(ISO.code, all_tsus$PSU_ID, "-", all_tsus$order, "-", all_tsus$TSU_ID)
# Calculate replacement PSUs
# Step 1: Exclude elements present in valid.PSU_clusters from all.PSU_clusters
remaining.PSU_clusters <- all.PSU_clusters %>%
filter(!(ID %in% valid.PSU_clusters$ID))
# Step 2: Get unique clustMin values from valid.PSU_clusters
unique_cluster <- distinct(valid.PSU_clusters, Replace_ID)$Replace_ID
# Initialize a vector to store indices of sampled replacements
sampled_indices <- integer(0)
# Loop through each unique clustMin to find a replacement
for (clust in unique_cluster) {
candidates_indices <- which(remaining.PSU_clusters$cluster == clust)
if (length(candidates_indices) > 0) {
sampled_index <- sample(candidates_indices, size = 1)
sampled_indices <- c(sampled_indices, sampled_index)
}
}
# Use the collected indices to slice the replacements from remaining.PSU_clusters
# replacements contains a replacement for each unique cluster in valid.PSU_clusters
replacements <- remaining.PSU_clusters[sampled_indices, ]
## 17 - Determine SSUs and TSUs for alternative PSUs=============================
# Initialize a list to store TSUs for all PSUs
alt_psus_tsus_sf <- list()
selected_ssus_sf <- list()
for (psu_id in 1:nrow(replacements)) {
selected_psu <- replacements[psu_id, ]
# Generate SSUs within the selected PSU
ssu_grid <- st_make_grid(selected_psu, cellsize = c(ssu_size, ssu_size), square = TRUE)
ssu_grid_sf <- st_sf(geometry = ssu_grid)
# Convert ssu_grid_sf to SpatVector
ssu_grid_vect <- vect(ssu_grid_sf)
# Extract values of lu for cells that intersect with ssu_grid_vect
extracted_values <- extract(crops, ssu_grid_vect, fun=table)
# Add lu code to the SSUs
ssu_grid_sf$lu <- (extracted_values[,2]*100)/25
ssu_grid_sf <- ssu_grid_sf[ssu_grid_sf$lu > percent_crop, ]
#summary(ssu_grid_sf)
# Subset ssu_grid_sf to get only the grid squares within lu
#ssu_grid_sf <- ssu_grid_sf[!is.na(ssu_grid_sf$lu), ]
#ssu_grid_sf <- ssu_grid_sf[ssu_grid_sf$lu>0, ]
#plot(ssu_grid_sf)
print(paste(psu_id, " out of ", nrow(replacements)))
# Count SSUs
total_ssus <- nrow(ssu_grid_sf)
if(total_ssus >= (num_primary_ssus + num_alternative_ssus)) {
primary_ssus_indices <- sample(1:total_ssus, num_primary_ssus, replace = FALSE)
available_for_alternatives <- setdiff(1:total_ssus, primary_ssus_indices)
alternative_ssus_indices <- sample(available_for_alternatives, num_alternative_ssus, replace = FALSE)
selected_ssus_sf[[psu_id]] <- rbind(ssu_grid_sf[primary_ssus_indices, ], ssu_grid_sf[alternative_ssus_indices, ])
# Generate replacement TSUs for SSUs with naming
primary_tsus <- lapply(primary_ssus_indices, function(index) {
generate_tsu_points_within_ssu(ssu_grid_sf[index, ], number_TSUs, index, "Alternative",crops)
})
# Generate TSUs for alternative SSUs with naming
alternative_tsus <- lapply(alternative_ssus_indices, function(index) {
generate_tsu_points_within_ssu(ssu_grid_sf[index, ], number_TSUs, index, "Alternative",crops)
})
# Combine all TSUs of the current PSU into one sf object
alt_psus_tsus_sf[[psu_id]] <- do.call(rbind, c(primary_tsus, alternative_tsus))
} else {
warning(paste("PSU", psu_id, "does not have enough SSUs for selection. Skipping."))
}
}
# Combine TSUs from all PSUs into one sf object
alt_tsus_combined_sf <- do.call(rbind, alt_psus_tsus_sf)
alt_tsus_combined_sf$TSU_Type <- "Target"
alt_tsus_combined_sf[alt_tsus_combined_sf$TSU_ID >1,"TSU_Type"] <- "Alternative"
alt_tsus_combined_sf$PSU_Type <- "Alternative"
alt_tsus_combined_sf <- alt_tsus_combined_sf %>%
dplyr::select("TSU_Name","PSU_ID","SSU_ID","TSU_ID","PSU_Type","SSU_Type","TSU_Type","geometry")
bbox_psu <- st_bbox(selected_psu[1])
lu_bbox = terra::crop(crops, selected_psu[1], mask = T, overwrite = T)
plot(lu_bbox)
# Define the labels for each type of data
labels <- c("Alternative PSU", "Target SSUs", "Alternative SSUs", "Alternative TSUs")
jpeg(paste0(results.path,"/Alternative_Sampling_Units_LU_100m_pixel.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot() +
geom_raster(data = as.data.frame(lu_bbox, xy = T), aes(x = x, y = y, fill = NA)) +
#scale_fill_gradientn(colours = colorspace::diverge_hcl(7)) + #scale_fill_viridis_c() +
guides(fill = "none")  +
geom_sf(data = selected_psu[1], fill = NA, aes(color = labels[1]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[primary_ssus_indices, ], fill = NA, aes(color = labels[2]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[alternative_ssus_indices, ], fill = NA, aes(color = labels[3]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = alt_tsus_combined_sf[1], aes(geometry = geometry, color = labels[4]), size = 0.3, shape = 19, show.legend = TRUE) +
coord_sf(xlim = c(bbox_psu["xmin"], bbox_psu["xmax"]), ylim = c(bbox_psu["ymin"], bbox_psu["ymax"])) +
labs(title = "Alternative PSU",
x = "Longitude",
y = "Latitude",
color = "Legend") +
scale_color_manual(values = c("Alternative PSU" = "red",
"Target SSUs" = "blue",
"Alternative SSUs" = "red",
"Alternative TSUs" = "black")) +
theme_minimal() +
theme(legend.position = "right",
legend.justification = "center",
legend.box.margin = margin(0, 0, 0, 20))
dev.off()
dev.off()
# Alternative plot - Same result
# Define the bounding box for the selected PSU
bbox_psu <- st_bbox(selected_psu[1])
lu_bbox = terra::crop(crops, selected_psu[1], mask = T, overwrite = T)
plot(lu_bbox)
labels <- c("Alternative PSU", "Target SSUs", "Alternative SSUs", "Alternative TSUs")
jpeg(paste0(results.path,"/Alternative_Sampling_Units_LU_100m_pixel.jpeg"), width = 8, height = 8, units = 'in', res = 300)
ggplot() +
geom_raster(data = as.data.frame(lu_bbox, xy = T), aes(x = x, y = y, fill = NA)) +
#scale_fill_gradientn(colours = colorspace::diverge_hcl(7)) + #scale_fill_viridis_c() +
guides(fill = "none")  +
geom_sf(data = selected_psu[1], fill = NA, aes(color = labels[1]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[primary_ssus_indices, ], fill = NA, aes(color = labels[2]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = ssu_grid_sf[alternative_ssus_indices, ], fill = NA, aes(color = labels[3]), lwd = 0.4, show.legend = TRUE) +
geom_sf(data = alt_tsus_combined_sf[1], aes(geometry = geometry, color = labels[4]), size = 0.3, shape = 19, show.legend = TRUE) +
coord_sf(xlim = c(bbox_psu["xmin"], bbox_psu["xmax"]), ylim = c(bbox_psu["ymin"], bbox_psu["ymax"])) +
labs(title = "Alternative PSU",
x = "Longitude",
y = "Latitude",
color = "Legend") +
scale_color_manual(values = c("Alternative PSU" = "red",
"Target SSUs" = "blue",
"Alternative SSUs" = "red",
"Alternative TSUs" = "black")) +
theme_minimal() +
theme(legend.position = "right",
legend.justification = "center",
legend.box.margin = margin(0, 0, 0, 20))
dev.off()
tm_shape(country_boundaries) +
tm_borders(
col = "black",  # Color of country boundaries
lwd = 1         # Line width for borders
) +
tm_shape(legacy) +
tm_dots(
col = "black",  # Color for legacy points
size = 0.3,     # Point size
title = "Legacy Points"
) +
tm_layout(
main.title = "Country Boundaries and Legacy Data",
main.title.size = 1.5,
main.title.position = "center",  # Center-align the title
legend.outside = TRUE,  # Allocate legend outside the map
legend.outside.position = "right",  # Place the legend on the right
frame = TRUE,  # Include a frame around the map
legend.text.size = 0.8,
legend.title.size = 1,
outer.margins = c(0.05, 0.05, 0.05, 0.05)  # Margins to prevent clipping
)
tm_shape(country_boundaries) +
tm_borders(col = "black", lwd = 1) +
tm_shape(legacy) +
tm_dots(col = "black", size = 0.3, title = "Legacy Points") +
tm_layout(
main.title = "Country Boundaries with Legacy Data Points",
main.title.size = 1.5,
main.title.fontface = "bold",
legend.outside = TRUE,
legend.outside.position = "bottom",  # Place legend below
frame = TRUE,
legend.title.size = 1.2,
legend.text.size = 0.9
)
dev.off()
tm_shape(country_boundaries) +
tm_borders(col = "black", lwd = 1) +
tm_shape(legacy) +
tm_dots(col = "black", size = 0.3, title = "Legacy Points") +
tm_layout(
main.title = "Country Boundaries with Legacy Data Points",
main.title.size = 1.5,
main.title.fontface = "bold",
legend.outside = TRUE,
legend.outside.position = "bottom",  # Place legend below
frame = TRUE,
legend.title.size = 1.2,
legend.text.size = 0.9
)
ggplot(data = country_boundaries) + geom_sf() + geom_sf(data = legacy, aes(geometry = geometry))
tm_shape(country_boundaries) +
tm_borders(col = "gray40", lwd = 1) +
tm_shape(legacy) +
tm_dots(col = "blue", size = 0.3, title = "Legacy Points") +
tm_basemap("OpenStreetMap")
tmap_mode("plot")  # Switch to static plotting mode
tm_shape(country_boundaries) +
tm_borders(
col = "gray40",  # Softer color for country boundaries
lwd = 1          # Line width
) +
tm_shape(legacy) +
tm_dots(
col = "blue",    # Distinct color for legacy points
size = 0.3,      # Point size
title = "Legacy Points"
) +
tm_basemap("OpenStreetMap") +  # Add OpenStreetMap as the background
tm_layout(
main.title = "Country Boundaries and Legacy Data",
main.title.size = 1.5,
main.title.fontface = "bold",  # Bold the title
legend.outside = TRUE,         # Place legend outside the map
legend.outside.position = "right",  # Position the legend on the right
frame = TRUE,                  # Add a frame around the map
legend.title.size = 1.2,       # Scale the legend title
legend.text.size = 0.9,        # Scale legend text
outer.margins = c(0.05, 0.05, 0.05, 0.05)  # Margins to avoid clipping
) +
tm_graticules(
lines = TRUE,
ticks = TRUE,
labels.size = 0.8,
alpha = 0.3  # Slightly transparent grid lines
) +
tm_xlab("Longitude") +  # Add longitude label
tm_ylab("Latitude")
