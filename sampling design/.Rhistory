# Select scaled information at legacy points
fixed <- unique(data.frame(units, scale(PSU.df[, covs])[units, ]))
# Compute optimal sampling PSUs considering legacy data
# If legacy data exists
res <- CSIS(fixed = fixed, nsup = n.psu, nstarts = iterations, mygrd = mygrd)
} else {
# If legacy data does not exist
res <- kmeans(mygrd, centers = n.psu, iter.max = 10000, nstart = 100)
}
# Define the total number of analyzed sites
nsamples <- 100
share <- 0.70
nsamples <- nsamples * share
# Define the number of PSUs to sample
n.psu <- round(nsamples/8)
# Define PSU and SSUs sizes
psu_size <- 2000  # (default = 2km x 2 km)
ssu_size <- 100 # (default = 100m x 100m = 1 ha)
psu_grid <- sf::st_read(file.path(paste0(results.path,"/psu_grid_counts.shp")))
# Subset PSUs with a minimal area of crops (defined above as "percent_crop")
psu_grid <- psu_grid[psu_grid$crop_perc > percent_crop,"ID"]
# Rasterize PSU vector grid
template <- rast(vect(psu_grid), res = psu_size)
# Transfer ID to the rasters
template <- rasterize(vect(psu_grid), template, field = "ID")
# Crop covariates to the sampling universe
cov.dat <- crop(cov.dat, psu_grid, mask=TRUE, overwrite=TRUE)
# Resample covariates to the definition of PSUs
PSU.r <- resample(cov.dat, template)
## Prepare function parameters
# Convert the raster stack information at PSU aggregated level to a dataframe with coordinates
PSU.df <- as.data.frame(PSU.r,xy=T)
# Get covariate names
covs <- names(cov.dat)
# Create dataframe of scaled covariates at the resolution of the PSUs (2x2km)
mygrd <- data.frame(scale(PSU.df[, covs]))
if (exists("legacy")){
# Prepare legacy data
# Subset legacy data to the area of crops
legacy <- st_filter(legacy,psu_grid)
# Get the soil legacy coordinates that serve to define fixed cluster centers
legacy_df <- st_coordinates(legacy)
# Initialize a vector to store the indices of the closest points from legacy data to the dataframe of covariates 'PSU.df'
units <- numeric(nrow(legacy_df))
# Loop through each point in 'legacy' to determine the minimum distance between covariates and legacy points
for (i in 1:nrow(legacy_df)) {
# Calculate distances from the current 'legacy' point to all points in the PSUs
distances <- sqrt((PSU.df$x - legacy_df[i, "X"])^2 + (PSU.df$y - legacy_df[i, "Y"])^2)
# Find the index of the minimum distance to identify the PSU for the legacy point
units[i] <- which.min(distances)
}
# Select scaled information at legacy points
fixed <- unique(data.frame(units, scale(PSU.df[, covs])[units, ]))
# Compute optimal sampling PSUs considering legacy data
# If legacy data exists
res <- CSIS(fixed = fixed, nsup = n.psu, nstarts = iterations, mygrd = mygrd)
} else {
# If legacy data does not exist
res <- kmeans(mygrd, centers = n.psu, iter.max = 10000, nstart = 100)
}
legacy
# Define location of soil legacy data
legacy <- file.path(paste0(shp.path,"zmb_legacy_v2_clipped_epsg_3857.shp"))
# Load legacy data (if it exists)
if(file.exists(legacy)){
legacy <- sf::st_read(legacy, quiet=TRUE)
# Transform coordinates to the common projection system
if(crs(legacy)!=epsg){
legacy <- legacy %>%
sf::st_transform(crs=epsg)
}
} else {
# If legacy data does not exist delete the object "legacy"
rm(legacy)
}
ggplot(data = country_boundaries) + geom_sf() + geom_sf(data = legacy, aes(geometry = geometry))
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../") # Move wd down to the main folder
# List of packages
packages <- c("sp","terra","raster","sf", "sgsR","entropy", "tripack","tibble",
"manipulate","dplyr","synoptReg", "doSNOW","Rfast","fields",
"ggplot2", "rassta")
# Load packages
invisible(lapply(packages, library, character.only = TRUE))
rm(packages)
# Define Country ISO code
ISO.code <- "ZMB"
# Define type of landuse
landuse <- "crops"
# Path to data folders
raster.path <- "data/rasters/"
shp.path <- "data/shapes/"
other.path <- "data/other/"
landuse_dir <- paste0("data/results/", landuse, "/")
# check if landuse directory exists if not create it
if (!file.exists(landuse_dir)){
# create a new sub directory inside the main path
dir.create(landuse_dir)
}
results.path <- landuse_dir
# Define EPSG system
epsg <- "EPSG:3857"
# Define the total number of analyzed sites
nsamples <- 100
share <- 0.70
nsamples <- nsamples * share
# Define the number of PSUs to sample
n.psu <- round(nsamples/8)
# Define PSU and SSUs sizes
psu_size <- 2000  # (default = 2km x 2 km)
ssu_size <- 100 # (default = 100m x 100m = 1 ha)
# Define number of target and alternative SSUs at each PSU
num_primary_ssus <- 4
num_alternative_ssus <- 3
# Define number of TSUs at each SSU
number_TSUs <- 3
# Define the number of iterations in the clustering process
iterations <- 10
# Define the minimum crop percent in selected PSUs
percent_crop <- 2
### FUNCTIONS ###
# Define Covariate Space Coverage function #
# Clustering CSC function with fixed legacy data
CSIS <- function(fixed, nsup, nstarts, mygrd) {
n_fix <- nrow(fixed)
p <- ncol(mygrd)
units <- fixed$units
mygrd_minfx <- mygrd[-units, ]
MSSSD_cur <- NA
for (s in 1:nstarts) {
units <- sample(nrow(mygrd_minfx), nsup)
centers_sup <- mygrd_minfx[units, ]
centers <- rbind(fixed[, names(mygrd)], centers_sup)
repeat {
D <- rdist(x1 = centers, x2 = mygrd)
cluster <- apply(X = D, MARGIN = 2, FUN = which.min) %>% as.factor(.)
centers_cur <- centers
for (i in 1:p) {
centers[, i] <- tapply(mygrd[, i], INDEX = cluster, FUN = mean)
}
#restore fixed centers
centers[1:n_fix, ] <- centers_cur[1:n_fix, ]
#check convergence
sumd <- diag(rdist(x1 = centers, x2 = centers_cur)) %>% sum(.)
if (sumd < 1E-12) {
D <- rdist(x1 = centers, x2 = mygrd)
Dmin <- apply(X = D, MARGIN = 2, FUN = min)
MSSSD <- mean(Dmin^2)
if (s == 1 | MSSSD < MSSSD_cur) {
centers_best <- centers
clusters_best <- cluster
MSSSD_cur <- MSSSD
}
break
}
}
print(paste0(s," out of ",nstarts))
}
list(centers = centers_best, cluster = clusters_best)
}
# Define location of country boundaries
country_boundaries <- file.path(paste0(shp.path,"roi_epsg_3857.shp"))
# Define location of soil legacy data
legacy <- file.path(paste0(shp.path,"zmb_legacy_v2_clipped_epsg_3857.shp"))
# Load and transform the country boundaries
country_boundaries <- sf::st_read(country_boundaries, quiet=TRUE)
if(crs(country_boundaries)!=epsg){
country_boundaries <- country_boundaries %>%
st_as_sf() %>% sf::st_transform(crs=epsg)
}
# Load legacy data (if it exists)
if(file.exists(legacy)){
legacy <- sf::st_read(legacy, quiet=TRUE)
# Transform coordinates to the common projection system
if(crs(legacy)!=epsg){
legacy <- legacy %>%
sf::st_transform(crs=epsg)
}
} else {
# If legacy data does not exist delete the object "legacy"
rm(legacy)
}
ggplot(data = country_boundaries) + geom_sf() + geom_sf(data = legacy, aes(geometry = geometry))
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../") # Move wd down to the main folder
# List of packages
packages <- c("sp","terra","raster","sf", "sgsR","entropy", "tripack","tibble",
"manipulate","dplyr","synoptReg", "doSNOW","Rfast","fields",
"ggplot2", "rassta")
# Load packages
invisible(lapply(packages, library, character.only = TRUE))
rm(packages)
# Define Country ISO code
ISO.code <- "ZMB"
# Define type of landuse
landuse <- "crops"
# Path to data folders
raster.path <- "data/rasters/"
shp.path <- "data/shapes/"
other.path <- "data/other/"
landuse_dir <- paste0("data/results/", landuse, "/")
# check if landuse directory exists if not create it
if (!file.exists(landuse_dir)){
# create a new sub directory inside the main path
dir.create(landuse_dir)
}
results.path <- landuse_dir
# Define EPSG system
epsg <- "EPSG:3857"
# Define the total number of analyzed sites
nsamples <- 100
share <- 0.70
nsamples <- nsamples * share
# Define the number of PSUs to sample
n.psu <- round(nsamples/8)
# Define PSU and SSUs sizes
psu_size <- 2000  # (default = 2km x 2 km)
ssu_size <- 100 # (default = 100m x 100m = 1 ha)
# Define number of target and alternative SSUs at each PSU
num_primary_ssus <- 4
num_alternative_ssus <- 3
# Define number of TSUs at each SSU
number_TSUs <- 3
# Define the number of iterations in the clustering process
iterations <- 10
# Define the minimum crop percent in selected PSUs
percent_crop <- 2
### FUNCTIONS ###
# Define Covariate Space Coverage function #
# Clustering CSC function with fixed legacy data
CSIS <- function(fixed, nsup, nstarts, mygrd) {
n_fix <- nrow(fixed)
p <- ncol(mygrd)
units <- fixed$units
mygrd_minfx <- mygrd[-units, ]
MSSSD_cur <- NA
for (s in 1:nstarts) {
units <- sample(nrow(mygrd_minfx), nsup)
centers_sup <- mygrd_minfx[units, ]
centers <- rbind(fixed[, names(mygrd)], centers_sup)
repeat {
D <- rdist(x1 = centers, x2 = mygrd)
cluster <- apply(X = D, MARGIN = 2, FUN = which.min) %>% as.factor(.)
centers_cur <- centers
for (i in 1:p) {
centers[, i] <- tapply(mygrd[, i], INDEX = cluster, FUN = mean)
}
#restore fixed centers
centers[1:n_fix, ] <- centers_cur[1:n_fix, ]
#check convergence
sumd <- diag(rdist(x1 = centers, x2 = centers_cur)) %>% sum(.)
if (sumd < 1E-12) {
D <- rdist(x1 = centers, x2 = mygrd)
Dmin <- apply(X = D, MARGIN = 2, FUN = min)
MSSSD <- mean(Dmin^2)
if (s == 1 | MSSSD < MSSSD_cur) {
centers_best <- centers
clusters_best <- cluster
MSSSD_cur <- MSSSD
}
break
}
}
print(paste0(s," out of ",nstarts))
}
list(centers = centers_best, cluster = clusters_best)
}
# Define location of country boundaries
country_boundaries <- file.path(paste0(shp.path,"roi_epsg_3857.shp"))
# Define location of soil legacy data
legacy <- file.path(paste0(shp.path,"zmb_legacy_v2_clipped_epsg_3857.shp"))
# Load and transform the country boundaries
country_boundaries <- sf::st_read(country_boundaries, quiet=TRUE)
if(crs(country_boundaries)!=epsg){
country_boundaries <- country_boundaries %>%
st_as_sf() %>% sf::st_transform(crs=epsg)
}
# Load legacy data (if it exists)
if(file.exists(legacy)){
legacy <- sf::st_read(legacy, quiet=TRUE)
# Transform coordinates to the common projection system
if(crs(legacy)!=epsg){
legacy <- legacy %>%
sf::st_transform(crs=epsg)
}
} else {
# If legacy data does not exist delete the object "legacy"
rm(legacy)
}
ggplot(data = country_boundaries) + geom_sf() + geom_sf(data = legacy, aes(geometry = geometry))
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../") # Move wd down to the main folder
getwd()
# List of packages
packages <- c("sp","terra","raster","sf", "sgsR","entropy", "tripack","tibble",
"manipulate","dplyr","synoptReg", "doSNOW","Rfast","fields",
"ggplot2", "rassta")
# Load packages
invisible(lapply(packages, library, character.only = TRUE))
rm(packages)
# Define Country ISO code
ISO.code <- "ZMB"
# Define type of landuse
landuse <- "crops"
# Path to data folders
raster.path <- "data/rasters/"
shp.path <- "data/shapes/"
other.path <- "data/other/"
landuse_dir <- paste0("data/results/", landuse, "/")
# check if landuse directory exists if not create it
if (!file.exists(landuse_dir)){
# create a new sub directory inside the main path
dir.create(landuse_dir)
}
results.path <- landuse_dir
# Define EPSG system
epsg <- "EPSG:3857"
# Define the total number of analyzed sites
nsamples <- 100
share <- 0.70
nsamples <- nsamples * share
# Define the number of PSUs to sample
n.psu <- round(nsamples/8)
# Define PSU and SSUs sizes
psu_size <- 2000  # (default = 2km x 2 km)
ssu_size <- 100 # (default = 100m x 100m = 1 ha)
# Define number of target and alternative SSUs at each PSU
num_primary_ssus <- 4
num_alternative_ssus <- 3
# Define number of TSUs at each SSU
number_TSUs <- 3
# Define the number of iterations in the clustering process
iterations <- 10
# Define the minimum crop percent in selected PSUs
percent_crop <- 2
### FUNCTIONS ###
# Define Covariate Space Coverage function #
# Clustering CSC function with fixed legacy data
CSIS <- function(fixed, nsup, nstarts, mygrd) {
n_fix <- nrow(fixed)
p <- ncol(mygrd)
units <- fixed$units
mygrd_minfx <- mygrd[-units, ]
MSSSD_cur <- NA
for (s in 1:nstarts) {
units <- sample(nrow(mygrd_minfx), nsup)
centers_sup <- mygrd_minfx[units, ]
centers <- rbind(fixed[, names(mygrd)], centers_sup)
repeat {
D <- rdist(x1 = centers, x2 = mygrd)
cluster <- apply(X = D, MARGIN = 2, FUN = which.min) %>% as.factor(.)
centers_cur <- centers
for (i in 1:p) {
centers[, i] <- tapply(mygrd[, i], INDEX = cluster, FUN = mean)
}
#restore fixed centers
centers[1:n_fix, ] <- centers_cur[1:n_fix, ]
#check convergence
sumd <- diag(rdist(x1 = centers, x2 = centers_cur)) %>% sum(.)
if (sumd < 1E-12) {
D <- rdist(x1 = centers, x2 = mygrd)
Dmin <- apply(X = D, MARGIN = 2, FUN = min)
MSSSD <- mean(Dmin^2)
if (s == 1 | MSSSD < MSSSD_cur) {
centers_best <- centers
clusters_best <- cluster
MSSSD_cur <- MSSSD
}
break
}
}
print(paste0(s," out of ",nstarts))
}
list(centers = centers_best, cluster = clusters_best)
}
# Define location of country boundaries
country_boundaries <- file.path(paste0(shp.path,"roi_epsg_3857.shp"))
country_boundaries
# Load and transform the country boundaries
country_boundaries <- sf::st_read(country_boundaries, quiet=TRUE)
if(crs(country_boundaries)!=epsg){
country_boundaries <- country_boundaries %>%
st_as_sf() %>% sf::st_transform(crs=epsg)
}
# Load legacy data (if it exists)
if(file.exists(legacy)){
legacy <- sf::st_read(legacy, quiet=TRUE)
# Transform coordinates to the common projection system
if(crs(legacy)!=epsg){
legacy <- legacy %>%
sf::st_transform(crs=epsg)
}
} else {
# If legacy data does not exist delete the object "legacy"
rm(legacy)
}
ggplot(data = country_boundaries) + geom_sf() + geom_sf(data = legacy, aes(geometry = geometry))
legacy
gc()
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("../") # Move wd down to the main folder
getwd()
# List of packages
packages <- c("sp","terra","raster","sf", "sgsR","entropy", "tripack","tibble",
"manipulate","dplyr","synoptReg", "doSNOW","Rfast","fields",
"ggplot2", "rassta")
# Load packages
invisible(lapply(packages, library, character.only = TRUE))
rm(packages)
# Define Country ISO code
ISO.code <- "ZMB"
# Define type of landuse
landuse <- "crops"
# Path to data folders
raster.path <- "data/rasters/"
shp.path <- "data/shapes/"
other.path <- "data/other/"
landuse_dir <- paste0("data/results/", landuse, "/")
# check if landuse directory exists if not create it
if (!file.exists(landuse_dir)){
# create a new sub directory inside the main path
dir.create(landuse_dir)
}
results.path <- landuse_dir
# Define EPSG system
epsg <- "EPSG:3857"
# Define the total number of analyzed sites
nsamples <- 100
share <- 0.70
nsamples <- nsamples * share
# Define the number of PSUs to sample
n.psu <- round(nsamples/8)
# Define PSU and SSUs sizes
psu_size <- 2000  # (default = 2km x 2 km)
ssu_size <- 100 # (default = 100m x 100m = 1 ha)
# Define number of target and alternative SSUs at each PSU
num_primary_ssus <- 4
num_alternative_ssus <- 3
# Define number of TSUs at each SSU
number_TSUs <- 3
# Define the number of iterations in the clustering process
iterations <- 10
# Define the minimum crop percent in selected PSUs
percent_crop <- 2
### FUNCTIONS ###
# Define Covariate Space Coverage function #
# Clustering CSC function with fixed legacy data
CSIS <- function(fixed, nsup, nstarts, mygrd) {
n_fix <- nrow(fixed)
p <- ncol(mygrd)
units <- fixed$units
mygrd_minfx <- mygrd[-units, ]
MSSSD_cur <- NA
for (s in 1:nstarts) {
units <- sample(nrow(mygrd_minfx), nsup)
centers_sup <- mygrd_minfx[units, ]
centers <- rbind(fixed[, names(mygrd)], centers_sup)
repeat {
D <- rdist(x1 = centers, x2 = mygrd)
cluster <- apply(X = D, MARGIN = 2, FUN = which.min) %>% as.factor(.)
centers_cur <- centers
for (i in 1:p) {
centers[, i] <- tapply(mygrd[, i], INDEX = cluster, FUN = mean)
}
#restore fixed centers
centers[1:n_fix, ] <- centers_cur[1:n_fix, ]
#check convergence
sumd <- diag(rdist(x1 = centers, x2 = centers_cur)) %>% sum(.)
if (sumd < 1E-12) {
D <- rdist(x1 = centers, x2 = mygrd)
Dmin <- apply(X = D, MARGIN = 2, FUN = min)
MSSSD <- mean(Dmin^2)
if (s == 1 | MSSSD < MSSSD_cur) {
centers_best <- centers
clusters_best <- cluster
MSSSD_cur <- MSSSD
}
break
}
}
print(paste0(s," out of ",nstarts))
}
list(centers = centers_best, cluster = clusters_best)
}
# Define location of country boundaries
country_boundaries <- file.path(paste0(shp.path,"roi_epsg_3857.shp"))
# Define location of soil legacy data
legacy <- file.path(paste0(shp.path,"zmb_legacy_v2_clipped_epsg_3857.shp"))
# Load and transform the country boundaries
country_boundaries <- sf::st_read(country_boundaries, quiet=TRUE)
if(crs(country_boundaries)!=epsg){
country_boundaries <- country_boundaries %>%
st_as_sf() %>% sf::st_transform(crs=epsg)
}
# Load legacy data (if it exists)
if(file.exists(legacy)){
legacy <- sf::st_read(legacy, quiet=TRUE)
# Transform coordinates to the common projection system
if(crs(legacy)!=epsg){
legacy <- legacy %>%
sf::st_transform(crs=epsg)
}
} else {
# If legacy data does not exist delete the object "legacy"
rm(legacy)
}
ggplot(data = country_boundaries) + geom_sf() + geom_sf(data = legacy, aes(geometry = geometry))
country_boundaries
